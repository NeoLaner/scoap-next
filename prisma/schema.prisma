// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String?                  @unique
  name                 String?
  email                String?                  @unique
  emailVerified        DateTime?
  image                String?
  addons               String[]                 @default([])
  accounts             Account[]
  sessions             Session[]
  rooms                Room[]
  Sources              Source[]
  MediaLinkInteraction MediaSourceInteraction[]
  MediaSource          MediaSource[]
  SubtitleSource       SubtitleSource[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  imdbId      String
  password    String?   @default("")
  name        String
  ownerId     String    @db.ObjectId
  online      Boolean   @default(false)
  timeWatched DateTime?
  season      Int?
  episode     Int?
  isPublic    Boolean   @default(false)

  owner           User     @relation(fields: [ownerId], references: [id])
  allowedGuestsId String[] @db.ObjectId
  bannedGuestsId  String[] @db.ObjectId
  Sources         Source[]
}

model Source {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  roomId        String @unique @db.ObjectId
  userId        String @unique @db.ObjectId
  // infoHash    String?
  // fileIdx     Int?
  mediaSourceId String @db.ObjectId

  room             Room            @relation(fields: [roomId], references: [id])
  user             User            @relation(fields: [userId], references: [id])
  MediaSource      MediaSource     @relation(fields: [mediaSourceId], references: [id])
  SubtitleSource   SubtitleSource? @relation(fields: [subtitleSourceId], references: [id])
  subtitleSourceId String?         @db.ObjectId
}

// Define the enums
enum Tag {
  Hardsub
  Softsub
  Dubbed
  WebDl
  BluRay
  CAM
}

// Update the MediaSource model
model MediaSource {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  ownerId   String @db.ObjectId
  imdbId    String
  videoLink String

  description  String? // if there is no description provided, the videoLink shows instead
  roomId       String   @db.ObjectId
  isPublic     Boolean  @default(false)
  disabled     Boolean // change by owner and admins
  canBePublic  Boolean // change by admins
  usersLikesId String[] @db.ObjectId // if the link is private, this should never change
  name         String   @default("")
  quality      String?
  tags         Tag[]

  //if is Dynamic
  seasonBoundary Int[] // if link type is dynamic for series
  //if is Static
  episode        Int?
  season         Int?

  sources      Source[]
  interactions MediaSourceInteraction[]
  user         User                     @relation(fields: [ownerId], references: [id])
}

model MediaSourceInteraction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  userId      String   @db.ObjectId
  mediaLinkId String   @db.ObjectId
  isLike      Boolean

  mediaLink MediaSource @relation(fields: [mediaLinkId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@unique([userId, mediaLinkId])
}

model SubtitleSource {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  ownerId   String   @db.ObjectId
  imdbId    String

  subUrl String

  translator   String?
  language     String
  description  String? // if there is no description provided, the videoLink shows instead
  roomId       String   @db.ObjectId
  isPublic     Boolean  @default(false)
  disabled     Boolean // change by owner and admins
  canBePublic  Boolean // change by admins
  usersLikesId String[] @db.ObjectId // if the link is private, this should never change
  name         String   @default("")
  quality      String?
  tags         Tag[]
  crossorigin  Boolean

  //if is Dynamic
  seasonBoundary Int[] // if link type is dynamic for series
  //if is Static
  episode        Int?
  season         Int?

  sources Source[]
  user    User     @relation(fields: [ownerId], references: [id])
}
