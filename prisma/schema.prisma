// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @db.ObjectId

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  addons        String[]   @default([])
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  rooms         Room[]
  instances      Instance[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  roomName    String
  roomOwnerId String   @db.ObjectId
  isPrivate   Boolean  @default(false)
  crossorigin Boolean  @default(false)
  imdbId      String
  season      String?
  episode     String?
  videoLinks  String[]
  subtitles   String[]
  instances  Instance[]
  source    Source?

  roomOwner User       @relation(fields: [roomOwnerId], references: [id])

}

model Source {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String  @default("default")
  roomId String @unique @db.ObjectId
  videoLink String?
  infoHash  String?
  fileIdx   Int?

  room   Room   @relation(fields: [roomId], references: [id])
}

model Instance {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  password String? @default("")
  hostId   String  @db.ObjectId
  roomId   String  @db.ObjectId

  room Room @relation(fields: [roomId], references: [id])
  host User @relation(fields: [hostId], references: [id])

  guests   String[]
}
