// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @db.ObjectId

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  addons        String[]   @default([])
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  rooms         Room[]
  instances     Instance[]
  Sources       Source[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  ownerId    String     @db.ObjectId
  imdbId     String
  videoLinks String[]
  instances  Instance[]

  owner User @relation(fields: [ownerId], references: [id])
}

model Instance {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  password    String?   @default("")
  name        String
  ownerId     String    @db.ObjectId
  roomId      String    @db.ObjectId
  online      Boolean
  timeWatched DateTime?
  season      Int?
  episode     Int?
  room        Room      @relation(fields: [roomId], references: [id])
  owner       User      @relation(fields: [ownerId], references: [id])

  guests  String[]
  Sources Source[]
}

model Source {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  instanceId String  @unique @db.ObjectId
  userId     String  @unique @db.ObjectId
  videoLink  String?
  infoHash   String?
  fileIdx    Int?

  instance Instance @relation(fields: [instanceId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}
